"use strict";(self.webpackChunkdocs_template=self.webpackChunkdocs_template||[]).push([[120],{2759:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>l,frontMatter:()=>o,metadata:()=>r,toc:()=>c});var a=t(5893),s=t(1151);const o={sidebar_position:2},i="How-To Guides",r={id:"sdk/how-to",title:"How-To Guides",description:"Setting up the SDK",source:"@site/docs/sdk/how-to.md",sourceDirName:"sdk",slug:"/sdk/how-to",permalink:"/metamask-institutional.docs/sdk/how-to",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Xavier Brochard",lastUpdatedAt:1727874313e3,sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sdkSidebary",previous:{title:"Overview",permalink:"/metamask-institutional.docs/sdk/"},next:{title:"Reference",permalink:"/metamask-institutional.docs/sdk/reference"}},d={},c=[{value:"Setting up the SDK",id:"setting-up-the-sdk",level:2},{value:"Installation",id:"installation",level:3},{value:"Setup",id:"setup",level:3},{value:"Listing supported Custodians",id:"listing-supported-custodians",level:2},{value:"Instantiating Custodians",id:"instantiating-custodians",level:2},{value:"Creating an Ethereum Transaction",id:"creating-an-ethereum-transaction",level:2},{value:"Getting an Ethereum Transaction",id:"getting-an-ethereum-transaction",level:2}];function u(n){const e={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.a)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"how-to-guides",children:"How-To Guides"})}),"\n",(0,a.jsx)(e.h2,{id:"setting-up-the-sdk",children:"Setting up the SDK"}),"\n",(0,a.jsx)(e.p,{children:"This guide will help you set up the MetaMask Institutional SDK."}),"\n",(0,a.jsx)(e.h3,{id:"installation",children:"Installation"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sh",children:"pip install metamask-institutional.sdk\n"})}),"\n",(0,a.jsx)(e.h3,{id:"setup",children:"Setup"}),"\n",(0,a.jsx)(e.p,{children:"In a terminal:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-sh",children:"export MMISDK_QREDO_REFRESH_TOKEN=xxxx # You can choose whatever variable name here as long as you adapt it in the script below\n"})}),"\n",(0,a.jsx)(e.p,{children:"Then in a Python script:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'# myscript.py\nfrom metamask_institutional.sdk import CustodianFactory\n\n# Instantiate the factory\nfactory = CustodianFactory()\n\n# Read the token from environment variables\ntoken = os.environ["MMISDK_QREDO_REFRESH_TOKEN"]\n\n# Initialize the custodian using a token\ncustodian = factory.create_for("qredo", "YOUR-TOKEN")\n'})}),"\n",(0,a.jsxs)(e.p,{children:["Refer to the ",(0,a.jsx)(e.a,{href:"/sdk/reference#factory-name-for-custodians",children:"Factory Name for Custodians"})," to find the appropriate name."]}),"\n",(0,a.jsx)(e.h2,{id:"listing-supported-custodians",children:"Listing supported Custodians"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-py",children:'from metamask_institutional.sdk import CustodianFactory\n\n# Instantiate the factory\nfactory = CustodianFactory()\n\nsupported_custodians = factory.get_supported_custodians()\nprint(supported_custodians)\n\n# [ "qredo", "qredo-dev", "cactus", ... ]\n'})}),"\n",(0,a.jsx)(e.h2,{id:"instantiating-custodians",children:"Instantiating Custodians"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-py",children:'from metamask_institutional.sdk import CustodianFactory\n\nrefresh_token_qredo_dev  = os.environ["REFRESH_TOKENQREDO-DEV"]\nrefresh_token_cactus_dev = os.environ["MMISDK_TOKEN_QREDO"]\n\n# Use the factory to instantiate one or multiple custodians.\n# It figures out itself which API and parameters to use.\nfactory = CustodianFactory()\ncustodian2 = factory.create_for("qredo-dev", refresh_token_qredo_dev)\ncustodian3 = factory.create_for("cactus-dev", refresh_token_cactus_dev)\n'})}),"\n",(0,a.jsx)(e.h2,{id:"creating-an-ethereum-transaction",children:"Creating an Ethereum Transaction"}),"\n",(0,a.jsx)(e.p,{children:"Learn how to create and send an Ethereum transaction using the SDK."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'import os\n\nfrom metamask_institutional.sdk import CustodianFactory\n\n# Instantiate the factory\nfactory = CustodianFactory()\n\n# Grab your token from the environment, or anywhere else\ntoken = os.environ["MMISDK_TOKEN_QREDO"]\n\n# Create the custodian, using the factory\ncustodian = factory.create_for("qredo", token)\n\n# Build tx details\ntx_params = {\n    "from": "0x62468FD916bF27A3b76d3de2e5280e53078e13E1",\n    "to": "0x62468FD916bF27A3b76d3de2e5280e53078e13E1",\n    "value": "100000000000000000",  # in Wei\n    "gas": "21000",\n    "gasPrice": "1000",\n    # "data": "0xsomething",\n    # "type": "2"\n    # "maxPriorityFeePerGas": "12321321",\n    # "maxFeePerGas": "12321321",\n}\nqredo_extra_params = {\n    "chainID": "3",\n}\n\n# Create the tx from details and send it to the custodian\ntransaction = custodian.create_transaction(tx_params, qredo_extra_params)\nprint(type(transaction))\n# <class \'metamask-institutional.sdk.common.transaction.Transaction\'>\n\nprint(transaction)\n# id=\'2EzDJkLVIjmH6LZQ2W1T4wPcTtK\'\n# type=\'1\'\n# from_=\'0x62468FD916bF27A3b76d3de2e5280e53078e13E1\'\n# to=\'0x62468FD916bF27A3b76d3de2e5280e53078e13E1\'\n# value=\'100000000000000000\'\n# gas=\'21000\'\n# gasPrice=\'1000\'\n# maxPriorityFeePerGas=None\n# maxFeePerGas=None\n# nonce=\'0\'\n# data=\'\'\n# hash=\'\'\n# status=TransactionStatus(finished=False, submitted=False, signed=False, success=False, displayText=\'Created\', reason=\'Unknown\')\n'})}),"\n",(0,a.jsx)(e.h2,{id:"getting-an-ethereum-transaction",children:"Getting an Ethereum Transaction"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:"import os\n\nfrom metamask_institutional.sdk import CustodianFactory\n\n# Instantiate the factory\nfactory = CustodianFactory()\n\n# Grab your token from the environment, or anywhere else\ntoken = os.environ[\"MMISDK_TOKEN_CACTUS\"]\n\n# Create the custodian, using the factory\ncustodian = factory.create_for(\"cactus\", token)\n\n# Get the transaction\ntransaction = custodian.get_transaction(\"5CM05NCLMRD888888000800\", 5)\n\nprint(type(transaction))\n# <class 'metamask-institutional.sdk.common.transaction.Transaction'>\n\nprint(transaction)\n# id='5CM05NCLMRD888888000800'\n# type='1'\n# from_='0xFA42B2eCf59abD6d6BD4BF07021D870E2FC0eF20'\n# to=None\n# value=None\n# gas='133997'\n# gasPrice='2151'\n# maxPriorityFeePerGas=None\n# maxFeePerGas=None\n# nonce=''\n# data=None\n# hash=None\n# status=TransactionStatus(finished=False, submitted=False, signed=False, success=False, displayText='Created', reason='Unknown')\n"})})]})}function l(n={}){const{wrapper:e}={...(0,s.a)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(u,{...n})}):u(n)}},1151:(n,e,t)=>{t.d(e,{Z:()=>r,a:()=>i});var a=t(7294);const s={},o=a.createContext(s);function i(n){const e=a.useContext(o);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:i(n.components),a.createElement(o.Provider,{value:e},n.children)}}}]);